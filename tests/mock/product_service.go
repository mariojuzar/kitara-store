// Code generated by MockGen. DO NOT EDIT.
// Source: api/service/product_service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	gomock "github.com/golang/mock/gomock"
	response "github.com/mariojuzar/kitara-store/api/entity/rest-web/response"
	reflect "reflect"
)

// MockProductService is a mock of ProductService interface
type MockProductService struct {
	ctrl     *gomock.Controller
	recorder *MockProductServiceMockRecorder
}

// MockProductServiceMockRecorder is the mock recorder for MockProductService
type MockProductServiceMockRecorder struct {
	mock *MockProductService
}

// NewMockProductService creates a new mock instance
func NewMockProductService(ctrl *gomock.Controller) *MockProductService {
	mock := &MockProductService{ctrl: ctrl}
	mock.recorder = &MockProductServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProductService) EXPECT() *MockProductServiceMockRecorder {
	return m.recorder
}

// GetAllProduct mocks base method
func (m *MockProductService) GetAllProduct() ([]response.ProductResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProduct")
	ret0, _ := ret[0].([]response.ProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProduct indicates an expected call of GetAllProduct
func (mr *MockProductServiceMockRecorder) GetAllProduct() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProduct", reflect.TypeOf((*MockProductService)(nil).GetAllProduct))
}
